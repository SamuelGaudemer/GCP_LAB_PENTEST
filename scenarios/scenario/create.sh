#!/bin/bash


# Setting up project
pid=$(gcloud config list --format 'value(core.project)' )  
gcloud config set project $pid 

name=$1

if [[ -n "$name" ]]; then 
pid=$(gcloud config list --format 'value(core.project)' )  


gcloud config set project $pid 


# creating bucket
wget https://raw.githubusercontent.com/SamuelGaudemer/GCP_LAB_PENTEST/dev/backup.sql

echo "Creating Bucket"

gsutil mb gs://$pid/ 
gsutil mb gs://$pid-credit-card/ 
gsutil mb gs://$pid-flags/ #create flag bucket
echo "Creating Service Account"

# Creating task 

gcloud iam service-accounts create $name --display-name="$name"  
gcloud iam service-accounts create $name-private --display-name="$name-private"  #create service account for flag access

email=$name@$pid.iam.gserviceaccount.com  
email2=$name-private@$pid.iam.gserviceaccount.com 

# creating key 
gcloud iam service-accounts keys create ./service-key.json --iam-account $email  

# adding the roles
gcloud projects add-iam-policy-binding $pid --role roles/storage.admin --role roles/iam.serviceAccountUser --role roles/compute.instanceAdmin.v1 --role roles/compute.instanceAdmin.v1 --member serviceAccount:$email 
# TO DO restreindre l'acces a tout sauf flags

gcloud projects add-iam-policy-binding $pid --member serviceAccount:$email2 --role roles/cloudsql.admin
gcloud storage buckets add-iam-policy-binding gs://$pid-flags --member serviceAccount:$email2 --role roles/storage.admin 
gsutil iam ch serviceAccount:$email2:objectAdmin gs://$pid-flags
gcloud iam service-accounts keys create ./service2-key.json --iam-account $email2

echo "Copying the contents to the Bucket"

# copying the file to the bucket
gsutil cp service-key.json gs://$pid/ 
gsutil cp backup.sql gs://$pid-flags/ 
# making the bucket publicly accessible

gsutil iam ch allUsers:objectViewer gs://$pid/ 

echo Now go to the below url https://storage.googleapis.com/$pid/

rm service-key.json

else
    echo "Enter the Service account-name"
fi

# creating instance

echo "Creating Compute instances"
gcloud compute instances create test --machine-type=f1-micro --zone=asia-east1-a --image-family ubuntu-1804-lts --image-project ubuntu-os-cloud --metadata-from-file startup-script=docker-install.sh 
gcloud compute instances create secret --machine-type=f1-micro --zone=asia-east1-a --image-family ubuntu-1804-lts --image-project ubuntu-os-cloud --metadata-from-file startup-script=secret-install.sh 

# creating sqlinstance 

echo "creating the sql instance"

#gcloud sql instances create $name --database-version=MYSQL_5_7 --tier=db-f1-micro  --zone=asia-east1-a  

ip=$(gcloud sql instances describe $name | grep "ipAddress" | sed -n 2P | awk -F ':' '{print $2}')

echo The ipAddress of the sql instance is $ip

#gcloud sql databases create ma_base --instance=$name
gcloud auth activate-service-account --key-file=./service2-key.json
gcloud sql import sql $name gs://$pid-flags/backup.sql --database=ma_base
#gcloud sql connect $name --user=root 
#CREATE DATABASE ma_base;
#use ma_base;
#CREATE TABLE flags (num INT, flag VARCHAR(100));
#INSERT INTO flags (num, flag) VALUES (1,'SCAM{FIRST_FLAG_FOUND_NICE!}'); #SSRF (in source code)
#INSERT INTO flags (num, flag) VALUES (2,'SCAM{SSTI!!}'); #SSTI (in VM)
#INSERT INTO flags (num, flag) VALUES (3, 'SCAM{DID_U_USE_CHAT_GCP?}'); # in PIVOT

#exit

rm service2-key.json
gcloud config set account $2
# creating firewall


echo "Creating firewall"
 gcloud compute firewall-rules create http2 --description="Incoming http allowed." \
     --allow tcp:80  

# getting ip

#fonctionne pas ? // TO DO afficher l'ip externe bien 
ip=$(gcloud compute instances  list | sed -n 6p)

echo The application can accessed at $ip
